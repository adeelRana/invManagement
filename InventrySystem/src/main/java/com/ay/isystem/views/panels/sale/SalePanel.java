/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ay.isystem.views.panels.sale;

import com.ay.isystem.enums.TransactionType;
import com.ay.isystem.models.EntityBeans.DealDetails;
import com.ay.isystem.models.EntityBeans.Deals;
import com.ay.isystem.models.EntityBeans.Products;
import com.ay.isystem.models.EntityBeans.Vendors;
import com.ay.isystem.utililty.Global;
import com.ay.isystem.utililty.Utility;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Adeel rana
 */
public class SalePanel extends javax.swing.JPanel {

    DefaultTableModel dtm;
    private Deals selectedDeal;
    private boolean hasAgent;
    private boolean isSaleReturn;
    private boolean showPrice;
    private boolean showQty;

    /**
     * Creates new form SalePanel
     *
     * @param deal
     * @param isSaleReturn
     */
    public SalePanel(Deals deal, boolean isSaleReturn) {
        initComponents();
        this.selectedDeal = deal;
        this.isSaleReturn = isSaleReturn;
        customEdit();
        hasAgent = deal.getAgentId() != 0;
        setAgentVisible(hasAgent);
        setReturnData();
        jXDatePicker1.setDate(new Date());
        tblItems.getColumnModel().getColumn(2).setMinWidth(0);
        tblItems.getColumnModel().getColumn(2).setMaxWidth(0);
        tblItems.getColumnModel().getColumn(1).setMinWidth(0);
        tblItems.getColumnModel().getColumn(1).setMaxWidth(0);

        txtInvoice.setText(deal.getInvoiceNo());
    }

    public SalePanel() {
        initComponents();
        customEdit();
        hasAgent = false;
        isSaleReturn = false;
        setAgentVisible(hasAgent);

        tblItems.getColumnModel().getColumn(2).setMinWidth(0);
        tblItems.getColumnModel().getColumn(2).setMaxWidth(0);
        tblItems.getColumnModel().getColumn(1).setMinWidth(0);
        tblItems.getColumnModel().getColumn(1).setMaxWidth(0);

        jXDatePicker1.setDate(new Date());
        txtInvoice.setText("" + Utility.getSaleInvoiceNo(jXDatePicker1.getDate()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtInvoice = new javax.swing.JTextField();
        btnSave2 = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        etSaleCurrentBalance = new javax.swing.JTextField();
        comboCustomerNamesAuto = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        productCombo = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        txtInvoiceTotal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        comboAgent = new javax.swing.JComboBox();
        txtAgent = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        txtTotalSale = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAgentsCut = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        toggleShowQty = new javax.swing.JToggleButton();
        toggleShowPrice = new javax.swing.JToggleButton();
        jButton2 = new javax.swing.JButton();

        txtInvoice.setEditable(false);

        btnSave2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSave2.setText("SAVE");
        btnSave2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave2ActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("EXIT");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDeleteItem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDeleteItem.setText("Delete Item");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnAddItem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Select Date");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Sale");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Customers Names");

        etSaleCurrentBalance.setEditable(false);

        comboCustomerNamesAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCustomerNamesAutoActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Current Balance");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Invoice");

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });

        productCombo.setToolTipText("");

        tblItems.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(5, 180, 169)));
        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Available Qty", "Unit Price", "Quantity", "Sale Rate", "Invoice Rate", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItems.getTableHeader().setReorderingAllowed(false);
        tblItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblItemsKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(tblItems);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
        );

        jLabel6.setText("Invoice Total");

        txtAgent.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtAgent.setText("Agent");

        jToggleButton1.setText("Add Agent");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Total Sale");

        jLabel8.setText("Agents Cut");

        jButton1.setText("Recalculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        toggleShowQty.setText("Show Qty");
        toggleShowQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleShowQtyActionPerformed(evt);
            }
        });

        toggleShowPrice.setText("Show U.P");
        toggleShowPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleShowPriceActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jToggleButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleShowQty)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toggleShowPrice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(productCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtInvoice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(txtAgent))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(etSaleCurrentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboCustomerNamesAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnSave2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInvoiceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotalSale, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAgentsCut, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboCustomerNamesAuto, productCombo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton2)
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(comboCustomerNamesAuto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel4))
                    .addComponent(etSaleCurrentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAgent))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1)
                    .addComponent(toggleShowQty)
                    .addComponent(toggleShowPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInvoiceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTotalSale, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAgentsCut, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAddItem, btnDeleteItem, comboAgent, comboCustomerNamesAuto, etSaleCurrentBalance, jXDatePicker1, productCombo, txtInvoice});

    }// </editor-fold>//GEN-END:initComponents

    private void btnSave2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave2ActionPerformed

        tableAutoTotal();
        if (isSaleReturn) {
            if (tblItems.getRowCount() > 0) {
                ArrayList<DealDetails> returnList = new ArrayList<>();
                DealDetails dd;
                Products p;
                for (int row = 0; row < tblItems.getRowCount(); row++) {
                    dd = new DealDetails();
                    DealDetails dealDetail = (DealDetails) tblItems.getValueAt(row, 0);
                    dd.setProductId(dealDetail.getProductId());
                    dd.setProductQty(Double.parseDouble(tblItems.getValueAt(row, 3).toString()));
                    dd.setTansactionDate(jXDatePicker1.getDate().getTime());
                    dd.setProductInvoiceRate(Double.parseDouble(tblItems.getValueAt(row, 5).toString()));
                    if (!hasAgent) {
                        dd.setProductSaleRate(Double.parseDouble(tblItems.getValueAt(row, 5).toString()));
                    } else {
                        dd.setProductSaleRate(Double.parseDouble(tblItems.getValueAt(row, 4).toString()));
                    }
                    dd.setTransactionTypeId(TransactionType.SALE_RETURN);
                    returnList.add(dd);
                }
                selectedDeal.setReturnDetails(returnList);
                Global.CONTROLLER.addDeal(selectedDeal, TransactionType.SALE_RETURN);

            }
        } else {
            if (tblItems.getRowCount() > 0) {
                Deals sale = new Deals();
                try {
                    sale.setSaleReturn(isSaleReturn);
                    if (hasAgent) {
                        sale.setAgentId(((Vendors) comboAgent.getSelectedItem()).getId());
                    } else {
                        sale.setAgentId(0);
                    }
                    sale.setInvoiceDate(jXDatePicker1.getDate().getTime());
                    sale.setInvoiceNo(Utility.getSaleInvoiceNo(jXDatePicker1.getDate()));
                    sale.setParty(((Vendors) comboCustomerNamesAuto.getSelectedItem()));
                    sale.setPartyId(((Vendors) comboCustomerNamesAuto.getSelectedItem()).getId());
                    sale.setTransactionAmount(Double.parseDouble(txtInvoiceTotal.getText()));
                    sale.setTransactionTypeId(TransactionType.SALE);

                    DealDetails dd;
                    ArrayList<DealDetails> detalisList = new ArrayList<>();
                    Products p;
                    for (int row = 0; row < tblItems.getRowCount(); row++) {
                        dd = new DealDetails();
                        p = (Products) tblItems.getValueAt(row, 0);
                        dd.setProductId(p.getId());
                        dd.setProductQty(Double.parseDouble(tblItems.getValueAt(row, 3).toString()));
                        dd.setTansactionDate(jXDatePicker1.getDate().getTime());
                        dd.setProductInvoiceRate(Double.parseDouble(tblItems.getValueAt(row, 5).toString()));
                        if (!hasAgent) {
                            dd.setProductSaleRate(Double.parseDouble(tblItems.getValueAt(row, 5).toString()));
                        } else {
                            dd.setProductSaleRate(Double.parseDouble(tblItems.getValueAt(row, 4).toString()));
                        }
                        dd.setTransactionTypeId(TransactionType.SALE);
                        detalisList.add(dd);
                    }
                    sale.setDetails(detalisList);
                    Global.CONTROLLER.addDeal(sale, TransactionType.SALE);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
        Global.addPanel(ShowSalePanel.class, (JPanel) this.getParent());

    }//GEN-LAST:event_btnSave2ActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        Global.addPanel(ShowSalePanel.class, (JPanel) this.getParent());
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        if (tblItems.getSelectedRowCount() > 0 && tblItems.getSelectedRowCount() < 2) {
            dtm.removeRow(tblItems.getSelectedRow());
        } else {
            JOptionPane.showMessageDialog(this, "Please select One record");
        }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        if (isSaleReturn) {
            dtm.setRowCount(0);
            for (DealDetails dd : getReturnList(selectedDeal.getDetails(), selectedDeal.getReturnDetails())) {
                dtm.addRow(new Object[]{
                    dd, "", "", dd.getProductQty(), dd.getProductSaleRate(), dd.getProductInvoiceRate(), (dd.getProductInvoiceRate() * dd.getProductQty())
                });
            }
            tableAutoTotal();
        } else {
            if (productCombo.getSelectedItem() != null) {
                Products p = (Products) productCombo.getSelectedItem();
                dtm.addRow(new Object[]{
                    p, p.getQuantity(), p.getPrice(), "", p.getSaleRate(), p.getInvoiceRate(), ""
                });
            }
        }

    }//GEN-LAST:event_btnAddItemActionPerformed

    private void comboCustomerNamesAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCustomerNamesAutoActionPerformed
        if (comboCustomerNamesAuto.getSelectedItem() != null) {
            etSaleCurrentBalance.setText(((Vendors) comboCustomerNamesAuto.getSelectedItem()).getCurrentBalance() + "");
        }
    }//GEN-LAST:event_comboCustomerNamesAutoActionPerformed

    private void tblItemsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblItemsKeyTyped
        tableAutoTotal();
    }//GEN-LAST:event_tblItemsKeyTyped

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
        if (jXDatePicker1.getDate() != null) {
            txtInvoice.setText("" + Utility.getSaleInvoiceNo(jXDatePicker1.getDate()));
        }
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        hasAgent = !hasAgent;
        if (hasAgent) {
            comboAgent.setVisible(true);
            txtAgent.setVisible(true);
            jLabel7.setVisible(true);
            jLabel8.setVisible(true);
            txtAgentsCut.setVisible(true);
            txtTotalSale.setVisible(true);
            tblItems.getColumnModel().getColumn(0).setWidth(100);
            tblItems.getColumnModel().getColumn(4).setMinWidth(tblItems.getColumnModel().getColumn(0).getMinWidth());
            tblItems.getColumnModel().getColumn(4).setMaxWidth(tblItems.getColumnModel().getColumn(0).getMaxWidth());
        } else {
            comboAgent.setVisible(false);
            txtAgent.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            txtAgentsCut.setVisible(false);
            txtTotalSale.setVisible(false);
            tblItems.getColumnModel().getColumn(4).setMinWidth(0);
            tblItems.getColumnModel().getColumn(4).setMaxWidth(0);
        }

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        tableAutoTotal();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void toggleShowQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleShowQtyActionPerformed
        showQty = !showQty;
        if (showQty) {
            tblItems.getColumnModel().getColumn(0).setWidth(100);
            tblItems.getColumnModel().getColumn(1).setMinWidth(tblItems.getColumnModel().getColumn(0).getMinWidth());
            tblItems.getColumnModel().getColumn(1).setMaxWidth(tblItems.getColumnModel().getColumn(0).getMaxWidth());
        } else {
            tblItems.getColumnModel().getColumn(1).setMinWidth(0);
            tblItems.getColumnModel().getColumn(1).setMaxWidth(0);
        }
    }//GEN-LAST:event_toggleShowQtyActionPerformed

    private void toggleShowPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleShowPriceActionPerformed
        showPrice = !showPrice;
        if (showPrice) {
            tblItems.getColumnModel().getColumn(0).setWidth(100);
            tblItems.getColumnModel().getColumn(2).setMinWidth(tblItems.getColumnModel().getColumn(0).getMinWidth());
            tblItems.getColumnModel().getColumn(2).setMaxWidth(tblItems.getColumnModel().getColumn(0).getMaxWidth());

        } else {
            tblItems.getColumnModel().getColumn(2).setMinWidth(0);
            tblItems.getColumnModel().getColumn(2).setMaxWidth(0);

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_toggleShowPriceActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Global.addListToCombo(comboCustomerNamesAuto, (ArrayList<Vendors>) Global.CONTROLLER.fetch("customer").getResponseObject());
        Global.addListToCombo(productCombo, (ArrayList<Products>) Global.CONTROLLER.fetch("product").getResponseObject());
        Global.addListToCombo(comboAgent, (ArrayList<Vendors>) Global.CONTROLLER.fetch("agent").getResponseObject());
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnSave2;
    private javax.swing.JComboBox comboAgent;
    private javax.swing.JComboBox comboCustomerNamesAuto;
    private static javax.swing.JTextField etSaleCurrentBalance;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToggleButton jToggleButton1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JComboBox productCombo;
    public static javax.swing.JTable tblItems;
    private javax.swing.JToggleButton toggleShowPrice;
    private javax.swing.JToggleButton toggleShowQty;
    private javax.swing.JLabel txtAgent;
    private javax.swing.JTextField txtAgentsCut;
    private javax.swing.JTextField txtInvoice;
    private javax.swing.JTextField txtInvoiceTotal;
    private javax.swing.JTextField txtTotalSale;
    // End of variables declaration//GEN-END:variables

    private void customEdit() {
        dtm = (DefaultTableModel) tblItems.getModel();
        AutoCompleteDecorator.decorate(comboCustomerNamesAuto);
        Global.addListToCombo(comboCustomerNamesAuto, (ArrayList<Vendors>) Global.CONTROLLER.fetch("customer").getResponseObject());
        AutoCompleteDecorator.decorate(productCombo);
        Global.addListToCombo(productCombo, (ArrayList<Products>) Global.CONTROLLER.fetch("product").getResponseObject());
        AutoCompleteDecorator.decorate(comboAgent);
        Global.addListToCombo(comboAgent, (ArrayList<Vendors>) Global.CONTROLLER.fetch("agent").getResponseObject());
    }

    private void setReturnData() {
        if (isSaleReturn) {
            btnAddItem.setText("Refresh Record");
            jLabel1.setText("Add Sale Return");
            comboCustomerNamesAuto.setEditable(false);
            comboAgent.setEditable(false);
            toggleShowQty.setVisible(false);
            toggleShowPrice.setVisible(false);
            jButton1.setVisible(false);
            jLabel6.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            txtAgentsCut.setVisible(false);
            txtTotalSale.setVisible(false);
            txtAgentsCut.setVisible(false);
            jToggleButton1.setVisible(false);
            productCombo.setVisible(false);
            dtm.setRowCount(0);
            for (DealDetails dd : getReturnList(selectedDeal.getDetails(), selectedDeal.getReturnDetails())) {
                dtm.addRow(new Object[]{
                    dd, "", "", dd.getProductQty(), dd.getProductSaleRate(), dd.getProductInvoiceRate(), (dd.getProductInvoiceRate() * dd.getProductQty())
                });
            }
            tableAutoTotal();
        } else {

        }
    }

    private void setAgentVisible(boolean showAgent) {
        comboAgent.setVisible(showAgent);
        txtAgent.setVisible(showAgent);
        jLabel7.setVisible(showAgent);
        jLabel8.setVisible(showAgent);
        txtAgentsCut.setVisible(showAgent);
        txtTotalSale.setVisible(showAgent);
        tblItems.getColumnModel().getColumn(4).setMinWidth(0);
        tblItems.getColumnModel().getColumn(4).setMaxWidth(0);

    }

    private void tableAutoTotal() {
        double quantity = 0;
        double saleRate = 0;
        double invoiceRate = 0;

        double totalSale = 0;
        double totalInvoiceSale = 0;
        double totalAgentsCut = 0;

        for (int rowRight = 0; rowRight < tblItems.getRowCount(); rowRight++) {
            quantity = 0;
            saleRate = 0;
            invoiceRate = 0;
            try {
                quantity = Double.parseDouble(tblItems.getValueAt(rowRight, 3).toString());
                saleRate = Double.parseDouble(tblItems.getValueAt(rowRight, 4).toString());
                invoiceRate = Double.parseDouble(tblItems.getValueAt(rowRight, 5).toString());

                totalSale += quantity * saleRate;
                totalInvoiceSale += quantity * invoiceRate;
                totalAgentsCut += (invoiceRate - saleRate) * quantity;
            } catch (NumberFormatException ex) {
            }
            tblItems.setValueAt(quantity * invoiceRate, rowRight, 6);
        }
        txtInvoiceTotal.setText(totalInvoiceSale + "");
        txtTotalSale.setText(totalSale + "");
        txtAgentsCut.setText(totalAgentsCut + "");
    }

    private List<DealDetails> getReturnList(ArrayList<DealDetails> saleList, ArrayList<DealDetails> returnList) {
        ArrayList li = new ArrayList();
        if (returnList.isEmpty()) {
            return saleList;
        } else {
            for (DealDetails sd : saleList) {
                double soldQty = sd.getProductQty();

                for (DealDetails rd : returnList) {
                    if (sd.matches(rd)) {
                        soldQty -= rd.getProductQty();
                    }
                }
                if (soldQty > 0) {
                    DealDetails dd = new DealDetails();
                    dd.setProductId(sd.getProductId());
                    dd.setProductQty(soldQty);
                    dd.setTansactionDate(sd.getTansactionDate());
                    dd.setProductInvoiceRate(sd.getProductInvoiceRate());
                    if (!hasAgent) {
                        dd.setProductSaleRate(sd.getProductSaleRate());
                    } else {
                        dd.setProductSaleRate(sd.getProductSaleRate());
                    }
                    dd.setTransactionTypeId(TransactionType.SALE);
                    li.add(dd);
                }
            }
            return li;
        }
    }
}
